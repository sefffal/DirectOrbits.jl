var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"KeplerianElements\nDirectOrbits.astuple\nKeplerianElementsDeg\norbitsolve\norbitsolve_ν\nOrbitSolution\nraoff\ndecoff\nperiod\ndistance\nmeanmotion\nperiastron\nradvel\npropmotionanom\nposangle\nprojectedseparation","category":"page"},{"location":"api/#DirectOrbits.KeplerianElements","page":"API","title":"DirectOrbits.KeplerianElements","text":"Orbit(\n    a=1.0, # semi-major axis, AU\n    i=π/2, # inclination, radians\n    e=0.1, # eccentricity\n    τ=π/2, # fraction of elements past periastron passage at MJD=0,\n    μ=1.0, # graviational parameter, solar masses\n    ω=π/2, # argument of periapsis\n    Ω=π/2, # longitude of the ascending node\n    plx=10.1, # paralax in milliarcseconds. Defines the distance to the object\n)\n\nRepresents one object's Keplerian elementsal elements. Values can be specified by keyword argument for convinience, or kep2cart for efficiency.\n\nSee also KeplerianElementsDeg for a convinience constructor accepting units of degrees instead of radians.\n\n\n\n\n\n","category":"type"},{"location":"api/#DirectOrbits.astuple","page":"API","title":"DirectOrbits.astuple","text":"astuple(elements)\n\nReturn the parameters of a KeplerianElements value as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.KeplerianElementsDeg","page":"API","title":"DirectOrbits.KeplerianElementsDeg","text":"KeplerianElementsDeg(a, i, e, τ, μ, ω, Ω, plx)\n\nA convinience function for constructing KeplerianElements where i, ω, and Ω are provided in units of degrees instead of radians.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.raoff","page":"API","title":"DirectOrbits.raoff","text":"raoff(elements, t)\n\nGet the offset from the central body in Right Ascention in milliarcseconds at some time t in days.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.decoff","page":"API","title":"DirectOrbits.decoff","text":"decoff(elements, t)\n\nGet the offset from the central body in Declination in milliarcseconds at some time t in days.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.period","page":"API","title":"DirectOrbits.period","text":"period(elem)\n\nPeriod of an orbit in days.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.distance","page":"API","title":"DirectOrbits.distance","text":"distance(elem)\n\nDistance to the system in parsecs.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.periastron","page":"API","title":"DirectOrbits.periastron","text":"periastron(elements, tref=58849)\n\nCompute the MJD of periastron passage most recently after the reference epoch tref. N.B. mjd of 58849 = 2020-01-01\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.radvel","page":"API","title":"DirectOrbits.radvel","text":"radvel(elements, t)\n\nGet the radial velocity of the planet along the line of sight at the time t in days, in units of m/s.\n\n\n\n\n\nradvel(elements, t, M_star, M_planet)\n\nGet the radial velocity of the star along the line of sight at the time t in days, in units of m/s. The mass of the star and planet must have consistent units.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.propmotionanom","page":"API","title":"DirectOrbits.propmotionanom","text":"propmotionanom(elements, t, M_planet)\n\nCalculate the instantenous proper motion anomaly on a star due to an orbiting companion.\n\n\n\n\n\n","category":"function"},{"location":"api/#DirectOrbits.projectedseparation","page":"API","title":"DirectOrbits.projectedseparation","text":"projectedseparation(elements, t)\n\nProjected separation in mas from the central body at time t (days).\n\n\n\n\n\n","category":"function"},{"location":"conventions/#Units-and-Conventions","page":"Conventions","title":"Units & Conventions","text":"","category":"section"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"The main constructor, KeplerianElements, accepts the following parameters:","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"a: Semi-major axis in astronomical units (AU)\ni: Inclination in radians\ne: Eccentricity in the range [0, 1)\nτ: Epoch of periastron passage, in fraction of orbit [0,1]\nμ: Graviataion parameter of the central body, expressed in units of Solar mass.\nω: Argument of periastron\nΩ: Longitude of the ascending node, radians.\nplx: Distance to the system expressed in milliarcseconds of parallax.","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"Thee parameter τ represents the epoch of periastron passage as a  fraction of the planet's orbit between 0 and 1. This follows the same convention as Orbitize! and you can read more about their choice in ther FAQ.","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"Parameters can either be specified by position or as keyword arguments (but not a mix). Positional  arguments are recommended if you are creating objects in a tight loop.","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"There is also a convenience constructor KeplerianElementsDeg that accepts i, ω, and Ω in units of degrees instead of radians.","category":"page"},{"location":"conventions/","page":"Conventions","title":"Conventions","text":"See this diagram from exoplanet.py as a reference for the conventions used by this package (radial velocity is positive increasing away from the Earth, opposite to exoplat.py).","category":"page"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The first step to using DirectDetections.jl is to install Julia. If you're used to Python, don't worry –- Julia is easy to install, and you won't need to code anything other than changing your input data.","category":"page"},{"location":"getting-started/#Installing-Julia","page":"Getting Started","title":"Installing Julia","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Visit the julialang.org Downloads page, and select the latest stable version for your operating system. Currently, this is 1.7.0. Click the [help] links next to your operating system if you require more detailed instructions.","category":"page"},{"location":"getting-started/#Installing-DirectOrbits","page":"Getting Started","title":"Installing DirectOrbits","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Normally, Julia packages are installed from the General registry. Since DirectOrbits isn't quite ready for prime time, it requires one extra step to add an additional registry.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Start julia in a terminal by running julia\nType ] to enter package-mode (see Julia documentation for more details)\nType up to setup the General registry if this is your first time using Julia.\nType registry add https://github.com/sefffal/DirectRegistry\nType add DirectOrbits","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"If you would like to visualize your results, you can also install the Plots package:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Type add Plots","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This will take a little while to download all the required packages and precompile for your system.","category":"page"},{"location":"getting-started/#Plotting-your-first-orbit","page":"Getting Started","title":"Plotting your first orbit","text":"","category":"section"},{"location":"#DirectOrbits.jl","page":"Home","title":"DirectOrbits.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for solving Keplerian orbits in the context of direct imaging. The primary use case is mapping Keplerian orbital elements into Cartesian coordinates at different times. A Plots.jl recipe is included for easily plotting orbits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Among other values, it calculates the projected positions of planets, as well as stellar radial velocity and proper motion anomaly. It's a great tool for visualizing different orbits (see examples) and generating nice animations (e.g. with Plots or Luxor.jl).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package has been designed for good performance and composability with a wide range of packages in the Julia ecosystem, including ForwardDiff. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To fit orbits to observations, see DirectDetections.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also DirectImages.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Orbit Plot)","category":"page"},{"location":"image-warping/#Image-Warping","page":"Image Warping","title":"Image Warping","text":"","category":"section"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"If you have an image of a system, you can warp the image as if each pixel were a test particle following Kepler's laws.  This is an easy way to see what a disk or a system of planets would look like at a time other than when it was captured.","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"To make this possible, DirectOrbits.jl can create OrbitalTransformation objects. These follow the conventions set out in CoordinateTransformations.jl and are compatible with ImageTransformations.jl.","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"Example:","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"ot = OrbitalTransformation(\n    i = 0.3,\n    e = 0.1,\n    μ = 1.0,\n    ω = 0.5,\n    Ω = 0.5,\n    plx = 30.0,\n    \n    platescale=10.0, # mas/px\n    dt = 3*365.25 # days forward in time\n)\n\nimg_centered = centered(img)\nimg_future = warp(img_centered, ot, axes(i))\n\n# Display with DirectImages.jl\nusing DirectImages\nimshow2([img; img_future], clims=(0,1), cmap=:seaborn_icefire_gradient)","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"Before, and After Orbital Transformation","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"(Image: image)","category":"page"},{"location":"image-warping/","page":"Image Warping","title":"Image Warping","text":"Note the arguments platescale and dt are required, but a and τ are not. The position of the pixel in X/Y space uniquely determines the semi-major axis and epoch of periastron passage when the rest of the orbital parameters are known. platescale in units of milliarseconds/pixel is necessary to get the overall scale of the transform correct. This is because an orbital transformation is not linear (and therefore, care must be taken when composing an OrbitalTransformation with other CoordinateTransformations). Scaling an image will change the amount of rotation that occurs at each separation. dt is the the amount of time in days to project the image forward. It can also be negative to project the image into the past. ","category":"page"},{"location":"kepler/#Kepler-Solver","page":"Kepler Solver","title":"Kepler Solver","text":"","category":"section"},{"location":"kepler/","page":"Kepler Solver","title":"Kepler Solver","text":"The heart of this package is being able to take a set of Keplerian elements and output relative positions, velocities, etc. The Kepler solver used to go from mean anomaly to eccentric anomaly is a tweaked version copied from AstroLib.jl.","category":"page"},{"location":"kepler/","page":"Kepler Solver","title":"Kepler Solver","text":"From AstroLib.jl:","category":"page"},{"location":"kepler/","page":"Kepler Solver","title":"Kepler Solver","text":"Many different numerical methods exist to solve Kepler's equation. This function implements the algorithm proposed in Markley (1995) Celestial Mechanics and Dynamical Astronomy, 63, 101 (DOI:10.1007/BF00691917). This method is not iterative, requires only four transcendental function evaluations, and has been proved to be fast and efficient over the entire range of elliptic motion 0≤e≤10.","category":"page"},{"location":"kepler/","page":"Kepler Solver","title":"Kepler Solver","text":"On my laptop, this solves for a single eccentric anomaly in just 47 ns. Since it is implemented in pure Julia, there is no overhead from calling into a C or Cython compiled function and no need for vectorization.","category":"page"}]
}
